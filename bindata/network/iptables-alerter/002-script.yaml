apiVersion: v1
kind: ConfigMap
metadata:
  name: iptables-alerter-script
  namespace: openshift-network-operator
  annotations:
    kubernetes.io/description: |
      This is a script used by the iptables-alerter DaemonSet
    release.openshift.io/version: "{{.ReleaseVersion}}"
data:
  iptables-alerter.sh: |-
    #!/bin/bash

    set -euo pipefail

    function crictl {
        chroot /host /bin/crictl "$@"
    }
    function ip {
        chroot /host /sbin/ip "$@"
    }

    while :; do
        date
        # Iterate over local pods
        for id in $(crictl pods -q); do
            # Inspect the pod
            read pod_namespace pod_name pod_uid netns netns_path <<<$(
                {{- /* bindata/network/iptables-alerter/002-script.yaml is processed
                     * as a go template (eg, to fill in {{.ReleaseVersion}} above), but
                     * it also needs to contain a go template string (to pass to crictl
                     * below). We do this by putting the crictl argument as a string
                     * literal inside an argument of the outer template:
                     *     ... --template {{`'BLAH BLAH BLAH'`}} ...
                     * becomes
                     *     ... --template 'BLAH BLAH BLAH' ...
                     * in the actual ConfigMap.
                     */ -}}
                crictl inspectp -o go-template --template {{`'{{.status.metadata.namespace}} {{.status.metadata.name}} {{.status.metadata.uid}} {{.status.linux.namespaces.options.network}} {{range .info.runtimeSpec.linux.namespaces }}{{if eq .type "network"}}{{.path}}{{end}}{{end}}'`}} ${id}  2>/dev/null || true )

            # Check that it's a pod-network pod. (This also catches "crictl errored out".)
            if [[ "${netns}" != "POD" ]]; then
                continue
            fi
            if [[ ! "${netns_path}" =~ ^/var/run/netns/ ]]; then
                continue
            fi
            netns=$(basename "${netns_path}")

            # Check if we already logged an event for it
            events=$(kubectl get events -n "${pod_namespace}" -l pod-uid="${pod_uid}" 2>/dev/null)
            if [[ -n "${events}" ]]; then
                echo "Skipping pod ${pod_namespace}/${pod_name} which we already logged an event for."
                continue
            fi

            # Set iptables_output to the first iptables rule in the pod's network
            # namespace, if any. (We use `awk` here rather than `grep` intentionally
            # to avoid awkwardness with grep's exit status on no match.)
            iptables_output=$(
                (ip netns exec "${netns}" iptables-save || true;
                 ip netns exec "${netns}" ip6tables-save || true) 2>/dev/null | \
                awk '/^-A/ {print; exit}'
            )
            if [[ -z "${iptables_output}" ]]; then
                continue
            fi

            echo "Logging event for ${pod_namespace}/${pod_name} which has iptables rules"

            # eg "2023-10-19T15:45:10.353846Z"
            event_time=$(date -u +%FT%T.%6NZ)

            kubectl create -f - <<EOF
    apiVersion: events.k8s.io/v1
    kind: Event
    metadata:
      namespace: ${pod_namespace}
      generateName: iptables-alert-
      labels:
        pod-uid: ${pod_uid}
    regarding:
      apiVersion: v1
      kind: Pod
      namespace: ${pod_namespace}
      name: ${pod_name}
      uid: ${pod_uid}
    reportingController: openshift.io/iptables-deprecation-alerter
    reportingInstance: ${ALERTER_POD_NAME}
    action: IPTablesUsageObserved
    reason: IPTablesUsageObserved
    type: Normal
    note: |
      This pod appears to have created one or more iptables rules. IPTables is
      deprecated and will no longer be available in RHEL 10 and later. You should
      consider migrating to another API such as nftables or eBPF. See also
      https://access.redhat.com/solutions/6739041

      Example iptables rule seen in this pod:
      ${iptables_output}
    eventTime: ${event_time}
    EOF
        done

        echo ""
        sleep 3600
    done
